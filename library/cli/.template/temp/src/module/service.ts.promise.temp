/**
 * @Author       : {{ fileHeaders.author }}
 * @Date         : {{ fileHeaders.createTime }}
 * @LastEditors  : {{ fileHeaders.author }}
 * @LastEditTime : {{ fileHeaders.createTime }}
 */

import { Injectable, Logger } from '@nestjs/common'

import {
  A4SimpleServicePromise,
  ISelectByPageOptions,
  ISelectByPageReturn,
  ISelectNoPageOptions,
  ISelectNoPageReturn,
} from '@hz-9/a4-core'

import { InjectRepository } from '@hz-9/a4-crud-typeorm/nestjs-typeorm'
import { DeepPartial, DeleteResult, In, Repository, UpdateResult } from '@hz-9/a4-crud-typeorm/typeorm'

import {
  {{ entityName.firstCase }}InsertResDto,
} from './dto/{{ entityName.kebabCase }}.insert-res.dto'

import {
  {{ entityName.firstCase }}SelectResDto,
} from './dto/{{ entityName.kebabCase }}.select-res.dto'

import { {{ entityName.firstCase }}Entity } from './entity/{{ entityName.kebabCase }}.entity'

@Injectable()
export class {{ entityName.firstCase }}Service implements A4SimpleServicePromise {
  protected readonly Logger: Logger = new Logger('{{ entityName.firstCase }}Service')

  public constructor(
    @InjectRepository({{ entityName.firstCase }}Entity)
    protected readonly repository: Repository<{{ entityName.firstCase }}Entity>
  ) {
    // ...
  }

  public async insert(model: DeepPartial<{{ entityName.firstCase }}Entity>): Promise<{{ entityName.firstCase }}InsertResDto> {
    const result = await this.repository.save(model)

    return result
  }

  public async insertMulti(modelList: DeepPartial<{{ entityName.firstCase }}Entity>[]): Promise<{{ entityName.firstCase }}InsertResDto[]> {
    const result = await this.repository.save(modelList)

    return result
  }

  public async selectByPage(
    model: DeepPartial<{{ entityName.firstCase }}Entity>,
    options: ISelectByPageOptions<{{ entityName.firstCase }}Entity>
  ): Promise<ISelectByPageReturn<{{ entityName.firstCase }}SelectResDto>> {
    const { page, sort } = options

    const findResult = await this.repository.findAndCount({
      where: model,

      skip: (page.pageNum - 1) * page.pageSize,
      take: page.pageSize,

      order: sort,
    })

    return {
      data: findResult[0],

      page: {
        ...page,

        total: findResult[1],
      },
    }
  }

  public async selectNoPage(
    model: DeepPartial<{{ entityName.firstCase }}Entity>,
    options: ISelectNoPageOptions<{{ entityName.firstCase }}Entity>
  ): Promise<ISelectNoPageReturn<{{ entityName.firstCase }}SelectResDto>> {
    const { sort } = options

    const findResult = await this.repository.findAndCount({
      where: model,

      order: sort,
    })

    return {
      data: findResult[0],
    }
  }

  public async selectById(id: {{ entityName.firstCase }}Entity['id']): Promise<{{ entityName.firstCase }}SelectResDto | null> {
    const result = await this.repository.findOneBy({ id })

    return result
  }

  public async selectByIds(ids: Array<{{ entityName.firstCase }}Entity['id']>): Promise<{{ entityName.firstCase }}SelectResDto[]> {
    const result = await this.repository.findBy({ id: In(ids) })

    return result
  }

  public async updateById(id: {{ entityName.firstCase }}Entity['id'], model: DeepPartial<{{ entityName.firstCase }}Entity>): Promise<UpdateResult> {
    const result = await this.repository.update(id, model)

    return result
  }

  public async updateByIds(ids: Array<{{ entityName.firstCase }}Entity['id']>, model: DeepPartial<{{ entityName.firstCase }}Entity>): Promise<UpdateResult> {
    const result = await this.repository.update(ids, model)

    return result
  }

  public async deleteById(id: {{ entityName.firstCase }}Entity['id']): Promise<DeleteResult> {
    const result = await this.repository.delete(id)
    return result
  }

  public async deleteByIds(ids: Array<{{ entityName.firstCase }}Entity['id']>): Promise<DeleteResult> {
    const result = await this.repository.delete(ids)
    return result
  }
}

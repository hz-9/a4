/**
 * @Author       : {{ fileHeaders.author }}
 * @Date         : {{ fileHeaders.createTime }}
 * @LastEditors  : {{ fileHeaders.author }}
 * @LastEditTime : {{ fileHeaders.createTime }}
 */

import { Injectable, Logger } from '@nestjs/common'

import {
  A4SimpleServiceRxjs,
  DeepPartial,
  IDeleteResult,
  ISelectByPageOptions,
  ISelectByPageReturn,
  ISelectNoPageOptions,
  ISelectNoPageReturn,
  IUpdateResult,
} from '@hz-9/a4-core'

import { A4TypeORMCrud, InjectA4TypeORMCrud } from '@hz-9/a4-crud-typeorm'

import {
  {{ entityName.firstCase }}InsertResDto,
} from './dto/{{ entityName.kebabCase }}.insert-res.dto'

import {
  {{ entityName.firstCase }}SelectResDto,
} from './dto/{{ entityName.kebabCase }}.select-res.dto'

import { {{ entityName.firstCase }}Entity } from './entity/{{ entityName.kebabCase }}.entity'

@Injectable()
export class {{ entityName.firstCase }}Service implements A4SimpleServicePromise {
  protected readonly Logger: Logger = new Logger('{{ entityName.firstCase }}Service')

  public constructor(
    @InjectA4TypeORMCrud({{ entityName.firstCase }}Entity)
    protected readonly crud: A4TypeORMCrud<{{ entityName.firstCase }}Entity>
  ) {
    // ...
  }

  public async insert(model: DeepPartial<{{ entityName.firstCase }}Entity>): Promise<{{ entityName.firstCase }}InsertResDto> {
    const result = this.crud.insertToPromise(model)

    return result
  }

  public async insertMulti(modelList: DeepPartial<{{ entityName.firstCase }}Entity>[]): Promise<{{ entityName.firstCase }}InsertResDto[]> {
    const result = this.crud.insertMultiToPromise(modelList)

    return result
  }

  public async selectByPage(
    model: DeepPartial<{{ entityName.firstCase }}Entity>,
    options: ISelectByPageOptions<{{ entityName.firstCase }}Entity>
  ): Promise<ISelectByPageReturn<{{ entityName.firstCase }}SelectResDto>> {
    const result = this.crud.selectByPageToPromise(model, options)

    return result
  }

  public async selectNoPage(
    model: DeepPartial<{{ entityName.firstCase }}Entity>,
    options: ISelectNoPageOptions<{{ entityName.firstCase }}Entity>
  ): Promise<ISelectNoPageReturn<{{ entityName.firstCase }}SelectResDto>> {
    const result = this.crud.selectNoPageToPromise(model, options)

    return result
  }

  public async selectById(id: {{ entityName.firstCase }}Entity['id']): Promise<{{ entityName.firstCase }}SelectResDto | null> {
    const result = this.crud.selectByIdToPromise(id)

    return result
  }

  public async selectByIds(ids: Array<{{ entityName.firstCase }}Entity['id']>): Promise<{{ entityName.firstCase }}SelectResDto[]> {
    const result = this.crud.selectByIdsToPromise(ids)

    return result
  }

  public async updateById(id: {{ entityName.firstCase }}Entity['id'], model: DeepPartial<{{ entityName.firstCase }}Entity>): Promise<IUpdateResult> {
    const result = this.crud.updateByIdToPromise(id, model)

    return result
  }

  public async updateByIds(ids: Array<{{ entityName.firstCase }}Entity['id']>, model: DeepPartial<{{ entityName.firstCase }}Entity>): Promise<IUpdateResult> {
    const result = this.crud.updateByIdsToPromise(ids, model)

    return result
  }

  public async deleteById(id: {{ entityName.firstCase }}Entity['id']): Promise<IDeleteResult> {
    const result = this.crud.deleteByIdToPromise(id)

    return result
  }

  public async deleteByIds(ids: Array<{{ entityName.firstCase }}Entity['id']>): Promise<IDeleteResult> {
    const result = this.crud.deleteByIdsToPromise(ids)

    return result
  }
}

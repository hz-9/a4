/**
 * @Author       : {{ fileHeaders.author }}
 * @Date         : {{ fileHeaders.createTime }}
 * @LastEditors  : {{ fileHeaders.author }}
 * @LastEditTime : {{ fileHeaders.createTime }}
 */

import { Injectable, Logger } from '@nestjs/common'

import { Observable, from } from 'rxjs'
import { map } from 'rxjs/operators'

import {
  A4SimpleServiceRxjs,
  ISelectByPageOptions,
  ISelectByPageReturn,
  ISelectNoPageOptions,
  ISelectNoPageReturn,
} from '@hz-9/a4-core'

import { InjectRepository } from '@hz-9/a4-crud-typeorm/nestjs-typeorm'
import { DeepPartial, DeleteResult, In, Repository, UpdateResult } from '@hz-9/a4-crud-typeorm/typeorm'

import {
  {{ entityName.firstCase }}InsertResDto,
} from './dto/{{ entityName.kebabCase }}.insert-res.dto'

import {
  {{ entityName.firstCase }}SelectResDto,
} from './dto/{{ entityName.kebabCase }}.select-res.dto'

import { {{ entityName.firstCase }}Entity } from './entity/{{ entityName.kebabCase }}.entity'

@Injectable()
export class {{ entityName.firstCase }}Service implements A4SimpleServiceRxjs {
  protected readonly Logger: Logger = new Logger('{{ entityName.firstCase }}Service')

  public constructor(
    @InjectRepository({{ entityName.firstCase }}Entity)
    protected readonly repository: Repository<{{ entityName.firstCase }}Entity>
  ) {
    // ...
  }

  public insert(model: DeepPartial<{{ entityName.firstCase }}Entity>): Observable<{{ entityName.firstCase }}InsertResDto> {
    const result = from(this.repository.save(model))

    return result
  }

  public insertMulti(modelList: DeepPartial<{{ entityName.firstCase }}Entity>[]): Observable<{{ entityName.firstCase }}InsertResDto[]> {
    const result = from(this.repository.save(modelList))

    return result
  }

  public selectByPage(
    model: DeepPartial<{{ entityName.firstCase }}Entity>,
    options: ISelectByPageOptions<{{ entityName.firstCase }}Entity>
  ): Observable<ISelectByPageReturn<{{ entityName.firstCase }}SelectResDto>> {
    const { page, sort } = options

    const findResult = from(this.repository.findAndCount({
      where: model,

      skip: (page.pageNum - 1) * page.pageSize,
      take: page.pageSize,

      order: sort,
    }))

    return findResult.pipe(map(
      (i) => ({
        data: i[0],

        page: {
          ...page,

          total: i[1],
        },
      })
    ))
  }

  public selectNoPage(
    model: DeepPartial<{{ entityName.firstCase }}Entity>,
    options: ISelectNoPageOptions<{{ entityName.firstCase }}Entity>
  ): Observable<ISelectNoPageReturn<{{ entityName.firstCase }}SelectResDto>> {
    const { sort } = options

    const findResult = from(this.repository.findAndCount({
      where: model,

      order: sort,
    }))

    return findResult.pipe(map(
      (i) => ({
        data: i[0],
      })
    ))
  }

  public selectById(id: {{ entityName.firstCase }}Entity['id']): Observable<{{ entityName.firstCase }}SelectResDto | null> {
    const result = from(this.repository.findOneBy({ id }))

    return result
  }

  public selectByIds(ids: Array<{{ entityName.firstCase }}Entity['id']>): Observable<{{ entityName.firstCase }}SelectResDto[]> {
    const result = from(this.repository.findBy({ id: In(ids) }))

    return result
  }

  public updateById(id: {{ entityName.firstCase }}Entity['id'], model: DeepPartial<{{ entityName.firstCase }}Entity>): Observable<UpdateResult> {
    const result = from(this.repository.update(id, model))

    return result
  }

  public updateByIds(ids: Array<{{ entityName.firstCase }}Entity['id']>, model: DeepPartial<{{ entityName.firstCase }}Entity>): Observable<UpdateResult> {
    const result = from(this.repository.update(ids, model))

    return result
  }

  public deleteById(id: {{ entityName.firstCase }}Entity['id']): Observable<DeleteResult> {
    const result = from(this.repository.delete(id))

    return result
  }

  public deleteByIds(ids: Array<{{ entityName.firstCase }}Entity['id']>): Observable<DeleteResult> {
    const result = from(this.repository.delete(ids))

    return result
  }
}
